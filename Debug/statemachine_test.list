
statemachine_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003274  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f8  080033f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080033f8  080033f8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f8  080033f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003468  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003468  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcf1  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001beb  00000000  00000000  0002bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000991  00000000  00000000  0002e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184ec  00000000  00000000  0002ef81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cee3  00000000  00000000  0004746d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf5e  00000000  00000000  00054350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003958  00000000  00000000  000e02b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e3c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003368 	.word	0x08003368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003368 	.word	0x08003368

0800014c <_read>:
void light_change_intensity(uint32_t value);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _read(int file, char *ptr, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
  HAL_UART_Receive(&huart2, (uint8_t*)ptr, 1, HAL_MAX_DELAY);
 8000158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800015c:	2201      	movs	r2, #1
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4806      	ldr	r0, [pc, #24]	; (800017c <_read+0x30>)
 8000162:	f002 face 	bl	8002702 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, 1, 100);
 8000166:	2364      	movs	r3, #100	; 0x64
 8000168:	2201      	movs	r2, #1
 800016a:	68b9      	ldr	r1, [r7, #8]
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <_read+0x30>)
 800016e:	f002 fa45 	bl	80025fc <HAL_UART_Transmit>
  return 1;
 8000172:	2301      	movs	r3, #1
}
 8000174:	4618      	mov	r0, r3
 8000176:	3710      	adds	r7, #16
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	200000d0 	.word	0x200000d0

08000180 <_write>:

int _write(int file, char *ptr, int len){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29a      	uxth	r2, r3
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	68b9      	ldr	r1, [r7, #8]
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <_write+0x24>)
 8000196:	f002 fa31 	bl	80025fc <HAL_UART_Transmit>
  return len;
 800019a:	687b      	ldr	r3, [r7, #4]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	200000d0 	.word	0x200000d0

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ae:	f000 fb93 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b2:	f000 f839 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b6:	f000 f919 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ba:	f000 f8ed 	bl	8000398 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80001be:	f000 f875 	bl	80002ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rx = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001c6:	2100      	movs	r1, #0
 80001c8:	4812      	ldr	r0, [pc, #72]	; (8000214 <main+0x6c>)
 80001ca:	f001 fb53 	bl	8001874 <HAL_TIM_PWM_Start>

  printf("Light control application\r\n");
 80001ce:	4812      	ldr	r0, [pc, #72]	; (8000218 <main+0x70>)
 80001d0:	f002 fd3c 	bl	8002c4c <puts>
  printf("-------------------------\r\n");
 80001d4:	4811      	ldr	r0, [pc, #68]	; (800021c <main+0x74>)
 80001d6:	f002 fd39 	bl	8002c4c <puts>
  printf("Send 'x' or 'o'\r\n");
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <main+0x78>)
 80001dc:	f002 fd36 	bl	8002c4c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (HAL_UART_Receive(&huart2, &rx, 1, HAL_MAX_DELAY) == HAL_OK){
 80001e0:	1df9      	adds	r1, r7, #7
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001e6:	2201      	movs	r2, #1
 80001e8:	480e      	ldr	r0, [pc, #56]	; (8000224 <main+0x7c>)
 80001ea:	f002 fa8a 	bl	8002702 <HAL_UART_Receive>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d1f5      	bne.n	80001e0 <main+0x38>
	//HAL_UART_Transmit(&huart2, &rx, 1, HAL_MAX_DELAY);
	if (rx == 'o'){
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b6f      	cmp	r3, #111	; 0x6f
 80001f8:	d103      	bne.n	8000202 <main+0x5a>
	    light_state_machine(ON);
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 f950 	bl	80004a0 <light_state_machine>
 8000200:	e005      	b.n	800020e <main+0x66>
	}
	else if (rx == 'x'){
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b78      	cmp	r3, #120	; 0x78
 8000206:	d102      	bne.n	800020e <main+0x66>
	    light_state_machine(OFF);
 8000208:	2001      	movs	r0, #1
 800020a:	f000 f949 	bl	80004a0 <light_state_machine>
	}
	rx = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	71fb      	strb	r3, [r7, #7]
    if (HAL_UART_Receive(&huart2, &rx, 1, HAL_MAX_DELAY) == HAL_OK){
 8000212:	e7e5      	b.n	80001e0 <main+0x38>
 8000214:	20000088 	.word	0x20000088
 8000218:	08003380 	.word	0x08003380
 800021c:	0800339c 	.word	0x0800339c
 8000220:	080033b8 	.word	0x080033b8
 8000224:	200000d0 	.word	0x200000d0

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fd10 	bl	8002c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800025a:	2300      	movs	r3, #0
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fe4b 	bl	8000f04 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000274:	f000 f996 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f8b8 	bl	8001408 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029e:	f000 f981 	bl	80005a4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08e      	sub	sp, #56	; 0x38
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	f107 0320 	add.w	r3, r7, #32
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002dc:	4b2c      	ldr	r3, [pc, #176]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002de:	4a2d      	ldr	r2, [pc, #180]	; (8000394 <MX_TIM3_Init+0xe8>)
 80002e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64 - 1;
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002e4:	223f      	movs	r2, #63	; 0x3f
 80002e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b29      	ldr	r3, [pc, #164]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f6:	4b26      	ldr	r3, [pc, #152]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000302:	4823      	ldr	r0, [pc, #140]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000304:	f001 fa0e 	bl	8001724 <HAL_TIM_Base_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800030e:	f000 f949 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031c:	4619      	mov	r1, r3
 800031e:	481c      	ldr	r0, [pc, #112]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000320:	f001 fd14 	bl	8001d4c <HAL_TIM_ConfigClockSource>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800032a:	f000 f93b 	bl	80005a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800032e:	4818      	ldr	r0, [pc, #96]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000330:	f001 fa47 	bl	80017c2 <HAL_TIM_PWM_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800033a:	f000 f933 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000342:	2300      	movs	r3, #0
 8000344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000346:	f107 0320 	add.w	r3, r7, #32
 800034a:	4619      	mov	r1, r3
 800034c:	4810      	ldr	r0, [pc, #64]	; (8000390 <MX_TIM3_Init+0xe4>)
 800034e:	f002 f895 	bl	800247c <HAL_TIMEx_MasterConfigSynchronization>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000358:	f000 f924 	bl	80005a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035c:	2360      	movs	r3, #96	; 0x60
 800035e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	4619      	mov	r1, r3
 8000372:	4807      	ldr	r0, [pc, #28]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000374:	f001 fc28 	bl	8001bc8 <HAL_TIM_PWM_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800037e:	f000 f911 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000382:	4803      	ldr	r0, [pc, #12]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000384:	f000 f96c 	bl	8000660 <HAL_TIM_MspPostInit>

}
 8000388:	bf00      	nop
 800038a:	3738      	adds	r7, #56	; 0x38
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000088 	.word	0x20000088
 8000394:	40000400 	.word	0x40000400

08000398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_USART2_UART_Init+0x50>)
 80003a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003be:	220c      	movs	r2, #12
 80003c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f002 f8c4 	bl	800255c <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003da:	f000 f8e3 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000d0 	.word	0x200000d0
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000400:	4b24      	ldr	r3, [pc, #144]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a23      	ldr	r2, [pc, #140]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <MX_GPIO_Init+0xa8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0310 	and.w	r3, r3, #16
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <MX_GPIO_Init+0xa8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1d      	ldr	r2, [pc, #116]	; (8000494 <MX_GPIO_Init+0xa8>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a17      	ldr	r2, [pc, #92]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <MX_GPIO_Init+0xa8>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_GPIO_Init+0xac>)
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4809      	ldr	r0, [pc, #36]	; (800049c <MX_GPIO_Init+0xb0>)
 8000476:	f000 fb9f 	bl	8000bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	2028      	movs	r0, #40	; 0x28
 8000480:	f000 fb63 	bl	8000b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000484:	2028      	movs	r0, #40	; 0x28
 8000486:	f000 fb7c 	bl	8000b82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	10110000 	.word	0x10110000
 800049c:	40011000 	.word	0x40011000

080004a0 <light_state_machine>:
 * Impementation of state machine handler
 * - Nested Switch
 * - State table approach
 * - State handler approach
 */
void light_state_machine(uint8_t event){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
  switch(curr_state){
 80004aa:	4b35      	ldr	r3, [pc, #212]	; (8000580 <light_state_machine+0xe0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d862      	bhi.n	8000578 <light_state_machine+0xd8>
 80004b2:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <light_state_machine+0x18>)
 80004b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b8:	080004c9 	.word	0x080004c9
 80004bc:	080004f5 	.word	0x080004f5
 80004c0:	08000521 	.word	0x08000521
 80004c4:	0800054d 	.word	0x0800054d
    case LIGHT_OFF:
      switch(event){
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d002      	beq.n	80004d4 <light_state_machine+0x34>
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d008      	beq.n	80004e4 <light_state_machine+0x44>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
	  curr_state = LIGHT_OFF;
	  break;
	}
      }
      break;
 80004d2:	e051      	b.n	8000578 <light_state_machine+0xd8>
	  light_change_intensity(LIGHT_BRIGHT_DIM);
 80004d4:	f240 104d 	movw	r0, #333	; 0x14d
 80004d8:	f000 f854 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_DIM;
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <light_state_machine+0xe0>)
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]
	  break;
 80004e2:	e006      	b.n	80004f2 <light_state_machine+0x52>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f84d 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_OFF;
 80004ea:	4b25      	ldr	r3, [pc, #148]	; (8000580 <light_state_machine+0xe0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
	  break;
 80004f0:	bf00      	nop
      break;
 80004f2:	e041      	b.n	8000578 <light_state_machine+0xd8>
    case LIGHT_DIM:
      switch(event){
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d002      	beq.n	8000500 <light_state_machine+0x60>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d008      	beq.n	8000510 <light_state_machine+0x70>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
	  curr_state = LIGHT_OFF;
	  break;
	}
      }
      break;
 80004fe:	e03b      	b.n	8000578 <light_state_machine+0xd8>
	  light_change_intensity(LIGHT_BRIGHT_MED);
 8000500:	f240 209a 	movw	r0, #666	; 0x29a
 8000504:	f000 f83e 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_MEDIUM;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <light_state_machine+0xe0>)
 800050a:	2202      	movs	r2, #2
 800050c:	701a      	strb	r2, [r3, #0]
	  break;
 800050e:	e006      	b.n	800051e <light_state_machine+0x7e>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f837 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_OFF;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <light_state_machine+0xe0>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	  break;
 800051c:	bf00      	nop
      break;
 800051e:	e02b      	b.n	8000578 <light_state_machine+0xd8>
    case LIGHT_MEDIUM:
      switch(event){
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <light_state_machine+0x8c>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d008      	beq.n	800053c <light_state_machine+0x9c>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
	  curr_state = LIGHT_OFF;
	  break;
	}
      }
      break;
 800052a:	e025      	b.n	8000578 <light_state_machine+0xd8>
	  light_change_intensity(LIGHT_BRIGHT_FULL);
 800052c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000530:	f000 f828 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_FULL;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <light_state_machine+0xe0>)
 8000536:	2203      	movs	r2, #3
 8000538:	701a      	strb	r2, [r3, #0]
	  break;
 800053a:	e006      	b.n	800054a <light_state_machine+0xaa>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 f821 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_OFF;
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <light_state_machine+0xe0>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	  break;
 8000548:	bf00      	nop
      break;
 800054a:	e015      	b.n	8000578 <light_state_machine+0xd8>

    case LIGHT_FULL:
      switch(event){
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d002      	beq.n	8000558 <light_state_machine+0xb8>
 8000552:	2b01      	cmp	r3, #1
 8000554:	d008      	beq.n	8000568 <light_state_machine+0xc8>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
	  curr_state = LIGHT_OFF;
	  break;
	}
      }
      break;
 8000556:	e00e      	b.n	8000576 <light_state_machine+0xd6>
	  light_change_intensity(LIGHT_BRIGHT_DIM);
 8000558:	f240 104d 	movw	r0, #333	; 0x14d
 800055c:	f000 f812 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_DIM;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <light_state_machine+0xe0>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
	  break;
 8000566:	e006      	b.n	8000576 <light_state_machine+0xd6>
	  light_change_intensity(LIGHT_BRIGHT_OFF);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 f80b 	bl	8000584 <light_change_intensity>
	  curr_state = LIGHT_OFF;
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <light_state_machine+0xe0>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
	  break;
 8000574:	bf00      	nop
      break;
 8000576:	bf00      	nop

  }

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000084 	.word	0x20000084

08000584 <light_change_intensity>:

void light_change_intensity(uint32_t value){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <light_change_intensity+0x1c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000088 	.word	0x20000088

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x5c>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_MspInit+0x5c>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x5c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_MspInit+0x5c>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x60>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x60>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <HAL_TIM_Base_MspInit+0x44>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d113      	bne.n	800064e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_TIM_Base_MspInit+0x48>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0c      	ldr	r2, [pc, #48]	; (800065c <HAL_TIM_Base_MspInit+0x48>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_TIM_Base_MspInit+0x48>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	201d      	movs	r0, #29
 8000644:	f000 fa81 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000648:	201d      	movs	r0, #29
 800064a:	f000 fa9a 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40000400 	.word	0x40000400
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <HAL_TIM_MspPostInit+0x58>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d117      	bne.n	80006b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_TIM_MspPostInit+0x5c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <HAL_TIM_MspPostInit+0x5c>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_TIM_MspPostInit+0x5c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000698:	2340      	movs	r3, #64	; 0x40
 800069a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <HAL_TIM_MspPostInit+0x60>)
 80006ac:	f000 fa84 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40000400 	.word	0x40000400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <HAL_UART_MspInit+0x70>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d123      	bne.n	800072c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_UART_MspInit+0x74>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <HAL_UART_MspInit+0x74>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	61d3      	str	r3, [r2, #28]
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_UART_MspInit+0x74>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_UART_MspInit+0x74>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <HAL_UART_MspInit+0x74>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_UART_MspInit+0x74>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000714:	230c      	movs	r3, #12
 8000716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <HAL_UART_MspInit+0x78>)
 8000728:	f000 fa46 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40004400 	.word	0x40004400
 8000738:	40021000 	.word	0x40021000
 800073c:	40010800 	.word	0x40010800

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f8ed 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <TIM3_IRQHandler+0x10>)
 8000796:	f001 f90f 	bl	80019b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000088 	.word	0x20000088

080007a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007ac:	f000 fb88 	bl	8000ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007da:	605a      	str	r2, [r3, #4]
  return 0;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <_isatty>:

int _isatty(int file)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f0:	2301      	movs	r3, #1
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f002 fa12 	bl	8002c6c <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20005000 	.word	0x20005000
 8000874:	00000400 	.word	0x00000400
 8000878:	20000118 	.word	0x20000118
 800087c:	20000270 	.word	0x20000270

08000880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800088c:	f7ff fff8 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000892:	490c      	ldr	r1, [pc, #48]	; (80008c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a09      	ldr	r2, [pc, #36]	; (80008cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008a8:	4c09      	ldr	r4, [pc, #36]	; (80008d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 f9df 	bl	8002c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fc75 	bl	80001a8 <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008c8:	08003400 	.word	0x08003400
  ldr r2, =_sbss
 80008cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008d0:	2000026c 	.word	0x2000026c

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_Init+0x28>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f923 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff fe5c 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f93b 	bl	8000b9e <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 f903 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000008 	.word	0x20000008
 8000984:	2000011c 	.word	0x2000011c

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	2000011c 	.word	0x2000011c

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4906      	ldr	r1, [pc, #24]	; (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff2d 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff42 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff35 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffa2 	bl	8000af0 <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e169      	b.n	8000ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8158 	bne.w	8000e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4a9a      	ldr	r2, [pc, #616]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d05e      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a98      	ldr	r2, [pc, #608]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d875      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000bfa:	4a98      	ldr	r2, [pc, #608]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d058      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c00:	4a96      	ldr	r2, [pc, #600]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d86f      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c06:	4a96      	ldr	r2, [pc, #600]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d052      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c0c:	4a94      	ldr	r2, [pc, #592]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d869      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c12:	4a94      	ldr	r2, [pc, #592]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d04c      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c18:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d863      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c1e:	4a92      	ldr	r2, [pc, #584]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d046      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c24:	4a90      	ldr	r2, [pc, #576]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d85d      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d82a      	bhi.n	8000c84 <HAL_GPIO_Init+0xcc>
 8000c2e:	2b12      	cmp	r3, #18
 8000c30:	d859      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <HAL_GPIO_Init+0x80>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000cb3 	.word	0x08000cb3
 8000c3c:	08000c8d 	.word	0x08000c8d
 8000c40:	08000c9f 	.word	0x08000c9f
 8000c44:	08000ce1 	.word	0x08000ce1
 8000c48:	08000ce7 	.word	0x08000ce7
 8000c4c:	08000ce7 	.word	0x08000ce7
 8000c50:	08000ce7 	.word	0x08000ce7
 8000c54:	08000ce7 	.word	0x08000ce7
 8000c58:	08000ce7 	.word	0x08000ce7
 8000c5c:	08000ce7 	.word	0x08000ce7
 8000c60:	08000ce7 	.word	0x08000ce7
 8000c64:	08000ce7 	.word	0x08000ce7
 8000c68:	08000ce7 	.word	0x08000ce7
 8000c6c:	08000ce7 	.word	0x08000ce7
 8000c70:	08000ce7 	.word	0x08000ce7
 8000c74:	08000ce7 	.word	0x08000ce7
 8000c78:	08000ce7 	.word	0x08000ce7
 8000c7c:	08000c95 	.word	0x08000c95
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	4a79      	ldr	r2, [pc, #484]	; (8000e6c <HAL_GPIO_Init+0x2b4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8a:	e02c      	b.n	8000ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e029      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e024      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e01f      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	330c      	adds	r3, #12
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e01a      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e013      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d105      	bne.n	8000cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	611a      	str	r2, [r3, #16]
          break;
 8000cd2:	e009      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	615a      	str	r2, [r3, #20]
          break;
 8000cde:	e003      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          break;
 8000ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d801      	bhi.n	8000cf2 <HAL_GPIO_Init+0x13a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	e001      	b.n	8000cf6 <HAL_GPIO_Init+0x13e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2bff      	cmp	r3, #255	; 0xff
 8000cfc:	d802      	bhi.n	8000d04 <HAL_GPIO_Init+0x14c>
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x152>
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	3b08      	subs	r3, #8
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	210f      	movs	r1, #15
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	6a39      	ldr	r1, [r7, #32]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d38:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d50:	4a48      	ldr	r2, [pc, #288]	; (8000e74 <HAL_GPIO_Init+0x2bc>)
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <HAL_GPIO_Init+0x2c0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d013      	beq.n	8000da4 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a3f      	ldr	r2, [pc, #252]	; (8000e7c <HAL_GPIO_Init+0x2c4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00d      	beq.n	8000da0 <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <HAL_GPIO_Init+0x2c8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x1e4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3d      	ldr	r2, [pc, #244]	; (8000e84 <HAL_GPIO_Init+0x2cc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <HAL_GPIO_Init+0x1e0>
 8000d94:	2303      	movs	r3, #3
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da4:	2300      	movs	r3, #0
 8000da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db6:	492f      	ldr	r1, [pc, #188]	; (8000e74 <HAL_GPIO_Init+0x2bc>)
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	492c      	ldr	r1, [pc, #176]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	608b      	str	r3, [r1, #8]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4928      	ldr	r1, [pc, #160]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	4922      	ldr	r1, [pc, #136]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60cb      	str	r3, [r1, #12]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	491e      	ldr	r1, [pc, #120]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	4918      	ldr	r1, [pc, #96]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4914      	ldr	r1, [pc, #80]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d021      	beq.n	8000e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	490e      	ldr	r1, [pc, #56]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	600b      	str	r3, [r1, #0]
 8000e54:	e021      	b.n	8000e9a <HAL_GPIO_Init+0x2e2>
 8000e56:	bf00      	nop
 8000e58:	10320000 	.word	0x10320000
 8000e5c:	10310000 	.word	0x10310000
 8000e60:	10220000 	.word	0x10220000
 8000e64:	10210000 	.word	0x10210000
 8000e68:	10120000 	.word	0x10120000
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40010c00 	.word	0x40010c00
 8000e80:	40011000 	.word	0x40011000
 8000e84:	40011400 	.word	0x40011400
 8000e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4909      	ldr	r1, [pc, #36]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f47f ae8e 	bne.w	8000bcc <HAL_GPIO_Init+0x14>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	372c      	adds	r7, #44	; 0x2c
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f806 	bl	8000ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e272      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8087 	beq.w	8001032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f24:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d00c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f30:	4b8f      	ldr	r3, [pc, #572]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d112      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5e>
 8000f3c:	4b8c      	ldr	r3, [pc, #560]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d10b      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	4b89      	ldr	r3, [pc, #548]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d06c      	beq.n	8001030 <HAL_RCC_OscConfig+0x12c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d168      	bne.n	8001030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e24c      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x76>
 8000f6c:	4b80      	ldr	r3, [pc, #512]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a7f      	ldr	r2, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e02e      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x98>
 8000f82:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7a      	ldr	r2, [pc, #488]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a77      	ldr	r2, [pc, #476]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e01d      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xbc>
 8000fa6:	4b72      	ldr	r3, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a71      	ldr	r2, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a6a      	ldr	r2, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a67      	ldr	r2, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d013      	beq.n	8001008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcd2 	bl	8000988 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fcce 	bl	8000988 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e200      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xe4>
 8001006:	e014      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fcbe 	bl	8000988 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fcba 	bl	8000988 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e1ec      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x10c>
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d063      	beq.n	8001106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b08      	cmp	r3, #8
 8001054:	d11c      	bne.n	8001090 <HAL_RCC_OscConfig+0x18c>
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e1c0      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4939      	ldr	r1, [pc, #228]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e03a      	b.n	8001106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_RCC_OscConfig+0x270>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fc73 	bl	8000988 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fc6f 	bl	8000988 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e1a1      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4927      	ldr	r1, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x270>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc52 	bl	8000988 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc4e 	bl	8000988 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e180      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d03a      	beq.n	8001188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d019      	beq.n	800114e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_RCC_OscConfig+0x274>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001120:	f7ff fc32 	bl	8000988 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fc2e 	bl	8000988 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e160      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 face 	bl	80016e8 <RCC_Delay>
 800114c:	e01c      	b.n	8001188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_RCC_OscConfig+0x274>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001154:	f7ff fc18 	bl	8000988 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115a:	e00f      	b.n	800117c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fc14 	bl	8000988 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d908      	bls.n	800117c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e146      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	42420000 	.word	0x42420000
 8001178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e9      	bne.n	800115c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a6 	beq.w	80012e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a87      	ldr	r2, [pc, #540]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7e      	ldr	r2, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011da:	f7ff fbd5 	bl	8000988 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff fbd1 	bl	8000988 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e103      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x312>
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	e02d      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x334>
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a69      	ldr	r2, [pc, #420]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a66      	ldr	r2, [pc, #408]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	e01c      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d10c      	bne.n	800125a <HAL_RCC_OscConfig+0x356>
 8001240:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	e00b      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d015      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb85 	bl	8000988 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fb81 	bl	8000988 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0b1      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0ee      	beq.n	8001282 <HAL_RCC_OscConfig+0x37e>
 80012a4:	e014      	b.n	80012d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb6f 	bl	8000988 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb6b 	bl	8000988 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e09b      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ee      	bne.n	80012ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d105      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8087 	beq.w	80013fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d061      	beq.n	80013bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d146      	bne.n	800138e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb3f 	bl	8000988 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fb3b 	bl	8000988 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e06d      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d108      	bne.n	8001348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4921      	ldr	r1, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a19      	ldr	r1, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	430b      	orrs	r3, r1
 800135a:	491b      	ldr	r1, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb0f 	bl	8000988 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb0b 	bl	8000988 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e03d      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x46a>
 800138c:	e035      	b.n	80013fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff faf8 	bl	8000988 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff faf4 	bl	8000988 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e026      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x498>
 80013ba:	e01e      	b.n	80013fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e019      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40007000 	.word	0x40007000
 80013d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x500>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0d0      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d910      	bls.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0207 	bic.w	r2, r3, #7
 8001432:	4965      	ldr	r1, [pc, #404]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b8      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a58      	ldr	r2, [pc, #352]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800146e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	494d      	ldr	r1, [pc, #308]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d040      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d115      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07f      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e073      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06b      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4936      	ldr	r1, [pc, #216]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff fa46 	bl	8000988 <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff fa42 	bl	8000988 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e053      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d210      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4922      	ldr	r1, [pc, #136]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e032      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	490e      	ldr	r1, [pc, #56]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001596:	f000 f821 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 800159a:	4602      	mov	r2, r0
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	490a      	ldr	r1, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015a8:	5ccb      	ldrb	r3, [r1, r3]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1cc>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f9a4 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	080033cc 	.word	0x080033cc
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d002      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x30>
 8001606:	2b08      	cmp	r3, #8
 8001608:	d003      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x36>
 800160a:	e027      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_GetSysClockFreq+0x98>)
 800160e:	613b      	str	r3, [r7, #16]
      break;
 8001610:	e027      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_RCC_GetSysClockFreq+0x9c>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_GetSysClockFreq+0x94>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0c5b      	lsrs	r3, r3, #17
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_RCC_GetSysClockFreq+0x98>)
 800163e:	fb03 f202 	mul.w	r2, r3, r2
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e004      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	613b      	str	r3, [r7, #16]
      break;
 800165a:	e002      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_RCC_GetSysClockFreq+0x98>)
 800165e:	613b      	str	r3, [r7, #16]
      break;
 8001660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001662:	693b      	ldr	r3, [r7, #16]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	007a1200 	.word	0x007a1200
 8001678:	080033e4 	.word	0x080033e4
 800167c:	080033f4 	.word	0x080033f4
 8001680:	003d0900 	.word	0x003d0900

08001684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_RCC_GetHCLKFreq+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000000 	.word	0x20000000

08001698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800169c:	f7ff fff2 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4903      	ldr	r1, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080033dc 	.word	0x080033dc

080016c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c4:	f7ff ffde 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0adb      	lsrs	r3, r3, #11
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4903      	ldr	r1, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080033dc 	.word	0x080033dc

080016e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <RCC_Delay+0x34>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <RCC_Delay+0x38>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0a5b      	lsrs	r3, r3, #9
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001704:	bf00      	nop
  }
  while (Delay --);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f9      	bne.n	8001704 <RCC_Delay+0x1c>
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000000 	.word	0x20000000
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e041      	b.n	80017ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe ff62 	bl	8000614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 fbe6 	bl	8001f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e041      	b.n	8001858 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f839 	bl	8001860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f000 fb97 	bl	8001f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_TIM_PWM_Start+0x24>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e022      	b.n	80018de <HAL_TIM_PWM_Start+0x6a>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b04      	cmp	r3, #4
 800189c:	d109      	bne.n	80018b2 <HAL_TIM_PWM_Start+0x3e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e015      	b.n	80018de <HAL_TIM_PWM_Start+0x6a>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d109      	bne.n	80018cc <HAL_TIM_PWM_Start+0x58>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e008      	b.n	80018de <HAL_TIM_PWM_Start+0x6a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e05e      	b.n	80019a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <HAL_TIM_PWM_Start+0x82>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f4:	e013      	b.n	800191e <HAL_TIM_PWM_Start+0xaa>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d104      	bne.n	8001906 <HAL_TIM_PWM_Start+0x92>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001904:	e00b      	b.n	800191e <HAL_TIM_PWM_Start+0xaa>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d104      	bne.n	8001916 <HAL_TIM_PWM_Start+0xa2>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001914:	e003      	b.n	800191e <HAL_TIM_PWM_Start+0xaa>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	6839      	ldr	r1, [r7, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fd84 	bl	8002434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <HAL_TIM_PWM_Start+0x138>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d107      	bne.n	8001946 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_TIM_PWM_Start+0x138>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_TIM_PWM_Start+0xfa>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001958:	d009      	beq.n	800196e <HAL_TIM_PWM_Start+0xfa>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_TIM_PWM_Start+0x13c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_TIM_PWM_Start+0xfa>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_TIM_PWM_Start+0x140>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d111      	bne.n	8001992 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b06      	cmp	r3, #6
 800197e:	d010      	beq.n	80019a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001990:	e007      	b.n	80019a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40000800 	.word	0x40000800

080019b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0202 	mvn.w	r2, #2
 80019e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fa7f 	bl	8001efe <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa72 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fa81 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0204 	mvn.w	r2, #4
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fa55 	bl	8001efe <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fa48 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fa57 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0208 	mvn.w	r2, #8
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2204      	movs	r2, #4
 8001a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fa2b 	bl	8001efe <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fa1e 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fa2d 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d122      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d11b      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0210 	mvn.w	r2, #16
 8001ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fa01 	bl	8001efe <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f9f4 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fa03 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10e      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0201 	mvn.w	r2, #1
 8001b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f9cf 	bl	8001eda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	2b80      	cmp	r3, #128	; 0x80
 8001b48:	d10e      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b54:	2b80      	cmp	r3, #128	; 0x80
 8001b56:	d107      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fcf1 	bl	800254a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d107      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f9c7 	bl	8001f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d107      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0220 	mvn.w	r2, #32
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fcbc 	bl	8002538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e0ae      	b.n	8001d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	f200 809f 	bhi.w	8001d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001bf6:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c31 	.word	0x08001c31
 8001c00:	08001d35 	.word	0x08001d35
 8001c04:	08001d35 	.word	0x08001d35
 8001c08:	08001d35 	.word	0x08001d35
 8001c0c:	08001c71 	.word	0x08001c71
 8001c10:	08001d35 	.word	0x08001d35
 8001c14:	08001d35 	.word	0x08001d35
 8001c18:	08001d35 	.word	0x08001d35
 8001c1c:	08001cb3 	.word	0x08001cb3
 8001c20:	08001d35 	.word	0x08001d35
 8001c24:	08001d35 	.word	0x08001d35
 8001c28:	08001d35 	.word	0x08001d35
 8001c2c:	08001cf3 	.word	0x08001cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f9de 	bl	8001ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0208 	orr.w	r2, r2, #8
 8001c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0204 	bic.w	r2, r2, #4
 8001c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6999      	ldr	r1, [r3, #24]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	619a      	str	r2, [r3, #24]
      break;
 8001c6e:	e064      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fa24 	bl	80020c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6999      	ldr	r1, [r3, #24]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	021a      	lsls	r2, r3, #8
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	619a      	str	r2, [r3, #24]
      break;
 8001cb0:	e043      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fa6d 	bl	8002198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0208 	orr.w	r2, r2, #8
 8001ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0204 	bic.w	r2, r2, #4
 8001cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69d9      	ldr	r1, [r3, #28]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	61da      	str	r2, [r3, #28]
      break;
 8001cf0:	e023      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fab7 	bl	800226c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69da      	ldr	r2, [r3, #28]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69d9      	ldr	r1, [r3, #28]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	021a      	lsls	r2, r3, #8
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	61da      	str	r2, [r3, #28]
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
      break;
 8001d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_TIM_ConfigClockSource+0x1c>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e0b4      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x186>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da0:	d03e      	beq.n	8001e20 <HAL_TIM_ConfigClockSource+0xd4>
 8001da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da6:	f200 8087 	bhi.w	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dae:	f000 8086 	beq.w	8001ebe <HAL_TIM_ConfigClockSource+0x172>
 8001db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db6:	d87f      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001db8:	2b70      	cmp	r3, #112	; 0x70
 8001dba:	d01a      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0xa6>
 8001dbc:	2b70      	cmp	r3, #112	; 0x70
 8001dbe:	d87b      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc0:	2b60      	cmp	r3, #96	; 0x60
 8001dc2:	d050      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0x11a>
 8001dc4:	2b60      	cmp	r3, #96	; 0x60
 8001dc6:	d877      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc8:	2b50      	cmp	r3, #80	; 0x50
 8001dca:	d03c      	beq.n	8001e46 <HAL_TIM_ConfigClockSource+0xfa>
 8001dcc:	2b50      	cmp	r3, #80	; 0x50
 8001dce:	d873      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d058      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x13a>
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d86f      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd8:	2b30      	cmp	r3, #48	; 0x30
 8001dda:	d064      	beq.n	8001ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8001ddc:	2b30      	cmp	r3, #48	; 0x30
 8001dde:	d86b      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d060      	beq.n	8001ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d867      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05c      	beq.n	8001ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d05a      	beq.n	8001ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8001df0:	e062      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e02:	f000 faf8 	bl	80023f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	609a      	str	r2, [r3, #8]
      break;
 8001e1e:	e04f      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e30:	f000 fae1 	bl	80023f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e42:	609a      	str	r2, [r3, #8]
      break;
 8001e44:	e03c      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e52:	461a      	mov	r2, r3
 8001e54:	f000 fa58 	bl	8002308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2150      	movs	r1, #80	; 0x50
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 faaf 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001e64:	e02c      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e72:	461a      	mov	r2, r3
 8001e74:	f000 fa76 	bl	8002364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2160      	movs	r1, #96	; 0x60
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fa9f 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001e84:	e01c      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e92:	461a      	mov	r2, r3
 8001e94:	f000 fa38 	bl	8002308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa8f 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001ea4:	e00c      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f000 fa86 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001eb6:	e003      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
      break;
 8001ebc:	e000      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a29      	ldr	r2, [pc, #164]	; (8001fec <TIM_Base_SetConfig+0xb8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <TIM_Base_SetConfig+0xbc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <TIM_Base_SetConfig+0xc0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <TIM_Base_SetConfig+0xb8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <TIM_Base_SetConfig+0xbc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <TIM_Base_SetConfig+0xc0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <TIM_Base_SetConfig+0xb8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800

08001ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f023 0201 	bic.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <TIM_OC1_SetConfig+0xc8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10c      	bne.n	800206e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f023 0308 	bic.w	r3, r3, #8
 800205a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <TIM_OC1_SetConfig+0xc8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	621a      	str	r2, [r3, #32]
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40012c00 	.word	0x40012c00

080020c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f023 0210 	bic.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0320 	bic.w	r3, r3, #32
 800210e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <TIM_OC2_SetConfig+0xd0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10d      	bne.n	8002140 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800213e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <TIM_OC2_SetConfig+0xd0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d113      	bne.n	8002170 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	621a      	str	r2, [r3, #32]
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40012c00 	.word	0x40012c00

08002198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <TIM_OC3_SetConfig+0xd0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10d      	bne.n	8002212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM_OC3_SetConfig+0xd0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d113      	bne.n	8002242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40012c00 	.word	0x40012c00

0800226c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	031b      	lsls	r3, r3, #12
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <TIM_OC4_SetConfig+0x98>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d109      	bne.n	80022e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	621a      	str	r2, [r3, #32]
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40012c00 	.word	0x40012c00

08002308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0201 	bic.w	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 030a 	bic.w	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f023 0210 	bic.w	r2, r3, #16
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800238e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	031b      	lsls	r3, r3, #12
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	621a      	str	r2, [r3, #32]
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	f043 0307 	orr.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002410:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	021a      	lsls	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2201      	movs	r2, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a1a      	ldr	r2, [r3, #32]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e046      	b.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d009      	beq.n	80024f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10c      	bne.n	8002510 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4313      	orrs	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800

08002538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e042      	b.n	80025f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe f89e 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800259e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f9af 	bl	8002904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b20      	cmp	r3, #32
 800261a:	d16d      	bne.n	80026f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_UART_Transmit+0x2c>
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e066      	b.n	80026fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2221      	movs	r2, #33	; 0x21
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800263a:	f7fe f9a5 	bl	8000988 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002654:	d108      	bne.n	8002668 <HAL_UART_Transmit+0x6c>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e003      	b.n	8002670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002670:	e02a      	b.n	80026c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f8d2 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e036      	b.n	80026fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	3302      	adds	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e007      	b.n	80026ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1cf      	bne.n	8002672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2200      	movs	r2, #0
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f8a2 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e006      	b.n	80026fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b08a      	sub	sp, #40	; 0x28
 8002706:	af02      	add	r7, sp, #8
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	d17c      	bne.n	800281c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_UART_Receive+0x2c>
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e075      	b.n	800281e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2222      	movs	r2, #34	; 0x22
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002746:	f7fe f91f 	bl	8000988 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d108      	bne.n	8002774 <HAL_UART_Receive+0x72>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800277c:	e043      	b.n	8002806 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2120      	movs	r1, #32
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f84c 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e042      	b.n	800281e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	3302      	adds	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	e01f      	b.n	80027f8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d007      	beq.n	80027d2 <HAL_UART_Receive+0xd0>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <HAL_UART_Receive+0xde>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e008      	b.n	80027f2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1b6      	bne.n	800277e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b090      	sub	sp, #64	; 0x40
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002836:	e050      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800283e:	d04c      	beq.n	80028da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <UART_WaitOnFlagUntilTimeout+0x30>
 8002846:	f7fe f89f 	bl	8000988 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002852:	429a      	cmp	r2, r3
 8002854:	d241      	bcs.n	80028da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002876:	637a      	str	r2, [r7, #52]	; 0x34
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800287c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e5      	bne.n	8002856 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3314      	adds	r3, #20
 8002890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	613b      	str	r3, [r7, #16]
   return(result);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028aa:	623a      	str	r2, [r7, #32]
 80028ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	69f9      	ldr	r1, [r7, #28]
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e5      	bne.n	800288a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e00f      	b.n	80028fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d09f      	beq.n	8002838 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3740      	adds	r7, #64	; 0x40
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800293e:	f023 030c 	bic.w	r3, r3, #12
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	430b      	orrs	r3, r1
 800294a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <UART_SetConfig+0x114>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d103      	bne.n	8002974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800296c:	f7fe fea8 	bl	80016c0 <HAL_RCC_GetPCLK2Freq>
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	e002      	b.n	800297a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002974:	f7fe fe90 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8002978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009a      	lsls	r2, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <UART_SetConfig+0x118>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	0119      	lsls	r1, r3, #4
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009a      	lsls	r2, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <UART_SetConfig+0x118>)
 80029b2:	fba3 0302 	umull	r0, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2064      	movs	r0, #100	; 0x64
 80029ba:	fb00 f303 	mul.w	r3, r0, r3
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	3332      	adds	r3, #50	; 0x32
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <UART_SetConfig+0x118>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	4419      	add	r1, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009a      	lsls	r2, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <UART_SetConfig+0x118>)
 80029ea:	fba3 0302 	umull	r0, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2064      	movs	r0, #100	; 0x64
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	3332      	adds	r3, #50	; 0x32
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <UART_SetConfig+0x118>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	51eb851f 	.word	0x51eb851f

08002a20 <std>:
 8002a20:	2300      	movs	r3, #0
 8002a22:	b510      	push	{r4, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	e9c0 3300 	strd	r3, r3, [r0]
 8002a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a2e:	6083      	str	r3, [r0, #8]
 8002a30:	8181      	strh	r1, [r0, #12]
 8002a32:	6643      	str	r3, [r0, #100]	; 0x64
 8002a34:	81c2      	strh	r2, [r0, #14]
 8002a36:	6183      	str	r3, [r0, #24]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	305c      	adds	r0, #92	; 0x5c
 8002a3e:	f000 f90d 	bl	8002c5c <memset>
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <std+0x58>)
 8002a44:	6224      	str	r4, [r4, #32]
 8002a46:	6263      	str	r3, [r4, #36]	; 0x24
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <std+0x5c>)
 8002a4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <std+0x60>)
 8002a4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <std+0x64>)
 8002a52:	6323      	str	r3, [r4, #48]	; 0x30
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <std+0x68>)
 8002a56:	429c      	cmp	r4, r3
 8002a58:	d006      	beq.n	8002a68 <std+0x48>
 8002a5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a5e:	4294      	cmp	r4, r2
 8002a60:	d002      	beq.n	8002a68 <std+0x48>
 8002a62:	33d0      	adds	r3, #208	; 0xd0
 8002a64:	429c      	cmp	r4, r3
 8002a66:	d105      	bne.n	8002a74 <std+0x54>
 8002a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a70:	f000 b926 	b.w	8002cc0 <__retarget_lock_init_recursive>
 8002a74:	bd10      	pop	{r4, pc}
 8002a76:	bf00      	nop
 8002a78:	08002f75 	.word	0x08002f75
 8002a7c:	08002f97 	.word	0x08002f97
 8002a80:	08002fcf 	.word	0x08002fcf
 8002a84:	08002ff3 	.word	0x08002ff3
 8002a88:	20000120 	.word	0x20000120

08002a8c <stdio_exit_handler>:
 8002a8c:	4a02      	ldr	r2, [pc, #8]	; (8002a98 <stdio_exit_handler+0xc>)
 8002a8e:	4903      	ldr	r1, [pc, #12]	; (8002a9c <stdio_exit_handler+0x10>)
 8002a90:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <stdio_exit_handler+0x14>)
 8002a92:	f000 b869 	b.w	8002b68 <_fwalk_sglue>
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	08002f0d 	.word	0x08002f0d
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <cleanup_stdio>:
 8002aa4:	6841      	ldr	r1, [r0, #4]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <cleanup_stdio+0x34>)
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	4299      	cmp	r1, r3
 8002aac:	4604      	mov	r4, r0
 8002aae:	d001      	beq.n	8002ab4 <cleanup_stdio+0x10>
 8002ab0:	f000 fa2c 	bl	8002f0c <_fflush_r>
 8002ab4:	68a1      	ldr	r1, [r4, #8]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <cleanup_stdio+0x38>)
 8002ab8:	4299      	cmp	r1, r3
 8002aba:	d002      	beq.n	8002ac2 <cleanup_stdio+0x1e>
 8002abc:	4620      	mov	r0, r4
 8002abe:	f000 fa25 	bl	8002f0c <_fflush_r>
 8002ac2:	68e1      	ldr	r1, [r4, #12]
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <cleanup_stdio+0x3c>)
 8002ac6:	4299      	cmp	r1, r3
 8002ac8:	d004      	beq.n	8002ad4 <cleanup_stdio+0x30>
 8002aca:	4620      	mov	r0, r4
 8002acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ad0:	f000 ba1c 	b.w	8002f0c <_fflush_r>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000120 	.word	0x20000120
 8002adc:	20000188 	.word	0x20000188
 8002ae0:	200001f0 	.word	0x200001f0

08002ae4 <global_stdio_init.part.0>:
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <global_stdio_init.part.0+0x30>)
 8002ae8:	4c0b      	ldr	r4, [pc, #44]	; (8002b18 <global_stdio_init.part.0+0x34>)
 8002aea:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <global_stdio_init.part.0+0x38>)
 8002aec:	4620      	mov	r0, r4
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	2104      	movs	r1, #4
 8002af2:	2200      	movs	r2, #0
 8002af4:	f7ff ff94 	bl	8002a20 <std>
 8002af8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002afc:	2201      	movs	r2, #1
 8002afe:	2109      	movs	r1, #9
 8002b00:	f7ff ff8e 	bl	8002a20 <std>
 8002b04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b08:	2202      	movs	r2, #2
 8002b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b0e:	2112      	movs	r1, #18
 8002b10:	f7ff bf86 	b.w	8002a20 <std>
 8002b14:	20000258 	.word	0x20000258
 8002b18:	20000120 	.word	0x20000120
 8002b1c:	08002a8d 	.word	0x08002a8d

08002b20 <__sfp_lock_acquire>:
 8002b20:	4801      	ldr	r0, [pc, #4]	; (8002b28 <__sfp_lock_acquire+0x8>)
 8002b22:	f000 b8ce 	b.w	8002cc2 <__retarget_lock_acquire_recursive>
 8002b26:	bf00      	nop
 8002b28:	2000025d 	.word	0x2000025d

08002b2c <__sfp_lock_release>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__sfp_lock_release+0x8>)
 8002b2e:	f000 b8c9 	b.w	8002cc4 <__retarget_lock_release_recursive>
 8002b32:	bf00      	nop
 8002b34:	2000025d 	.word	0x2000025d

08002b38 <__sinit>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	f7ff fff0 	bl	8002b20 <__sfp_lock_acquire>
 8002b40:	6a23      	ldr	r3, [r4, #32]
 8002b42:	b11b      	cbz	r3, 8002b4c <__sinit+0x14>
 8002b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b48:	f7ff bff0 	b.w	8002b2c <__sfp_lock_release>
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__sinit+0x28>)
 8002b4e:	6223      	str	r3, [r4, #32]
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__sinit+0x2c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f5      	bne.n	8002b44 <__sinit+0xc>
 8002b58:	f7ff ffc4 	bl	8002ae4 <global_stdio_init.part.0>
 8002b5c:	e7f2      	b.n	8002b44 <__sinit+0xc>
 8002b5e:	bf00      	nop
 8002b60:	08002aa5 	.word	0x08002aa5
 8002b64:	20000258 	.word	0x20000258

08002b68 <_fwalk_sglue>:
 8002b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	4688      	mov	r8, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	2600      	movs	r6, #0
 8002b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b78:	f1b9 0901 	subs.w	r9, r9, #1
 8002b7c:	d505      	bpl.n	8002b8a <_fwalk_sglue+0x22>
 8002b7e:	6824      	ldr	r4, [r4, #0]
 8002b80:	2c00      	cmp	r4, #0
 8002b82:	d1f7      	bne.n	8002b74 <_fwalk_sglue+0xc>
 8002b84:	4630      	mov	r0, r6
 8002b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b8a:	89ab      	ldrh	r3, [r5, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d907      	bls.n	8002ba0 <_fwalk_sglue+0x38>
 8002b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b94:	3301      	adds	r3, #1
 8002b96:	d003      	beq.n	8002ba0 <_fwalk_sglue+0x38>
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	47c0      	blx	r8
 8002b9e:	4306      	orrs	r6, r0
 8002ba0:	3568      	adds	r5, #104	; 0x68
 8002ba2:	e7e9      	b.n	8002b78 <_fwalk_sglue+0x10>

08002ba4 <_puts_r>:
 8002ba4:	6a03      	ldr	r3, [r0, #32]
 8002ba6:	b570      	push	{r4, r5, r6, lr}
 8002ba8:	4605      	mov	r5, r0
 8002baa:	460e      	mov	r6, r1
 8002bac:	6884      	ldr	r4, [r0, #8]
 8002bae:	b90b      	cbnz	r3, 8002bb4 <_puts_r+0x10>
 8002bb0:	f7ff ffc2 	bl	8002b38 <__sinit>
 8002bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bb6:	07db      	lsls	r3, r3, #31
 8002bb8:	d405      	bmi.n	8002bc6 <_puts_r+0x22>
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	0598      	lsls	r0, r3, #22
 8002bbe:	d402      	bmi.n	8002bc6 <_puts_r+0x22>
 8002bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc2:	f000 f87e 	bl	8002cc2 <__retarget_lock_acquire_recursive>
 8002bc6:	89a3      	ldrh	r3, [r4, #12]
 8002bc8:	0719      	lsls	r1, r3, #28
 8002bca:	d513      	bpl.n	8002bf4 <_puts_r+0x50>
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	b18b      	cbz	r3, 8002bf4 <_puts_r+0x50>
 8002bd0:	3e01      	subs	r6, #1
 8002bd2:	68a3      	ldr	r3, [r4, #8]
 8002bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	60a3      	str	r3, [r4, #8]
 8002bdc:	b9e9      	cbnz	r1, 8002c1a <_puts_r+0x76>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	da2e      	bge.n	8002c40 <_puts_r+0x9c>
 8002be2:	4622      	mov	r2, r4
 8002be4:	210a      	movs	r1, #10
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 fa07 	bl	8002ffa <__swbuf_r>
 8002bec:	3001      	adds	r0, #1
 8002bee:	d007      	beq.n	8002c00 <_puts_r+0x5c>
 8002bf0:	250a      	movs	r5, #10
 8002bf2:	e007      	b.n	8002c04 <_puts_r+0x60>
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 fa3c 	bl	8003074 <__swsetup_r>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d0e7      	beq.n	8002bd0 <_puts_r+0x2c>
 8002c00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c06:	07da      	lsls	r2, r3, #31
 8002c08:	d405      	bmi.n	8002c16 <_puts_r+0x72>
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	059b      	lsls	r3, r3, #22
 8002c0e:	d402      	bmi.n	8002c16 <_puts_r+0x72>
 8002c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c12:	f000 f857 	bl	8002cc4 <__retarget_lock_release_recursive>
 8002c16:	4628      	mov	r0, r5
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da04      	bge.n	8002c28 <_puts_r+0x84>
 8002c1e:	69a2      	ldr	r2, [r4, #24]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dc06      	bgt.n	8002c32 <_puts_r+0x8e>
 8002c24:	290a      	cmp	r1, #10
 8002c26:	d004      	beq.n	8002c32 <_puts_r+0x8e>
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	6022      	str	r2, [r4, #0]
 8002c2e:	7019      	strb	r1, [r3, #0]
 8002c30:	e7cf      	b.n	8002bd2 <_puts_r+0x2e>
 8002c32:	4622      	mov	r2, r4
 8002c34:	4628      	mov	r0, r5
 8002c36:	f000 f9e0 	bl	8002ffa <__swbuf_r>
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d1c9      	bne.n	8002bd2 <_puts_r+0x2e>
 8002c3e:	e7df      	b.n	8002c00 <_puts_r+0x5c>
 8002c40:	250a      	movs	r5, #10
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	6022      	str	r2, [r4, #0]
 8002c48:	701d      	strb	r5, [r3, #0]
 8002c4a:	e7db      	b.n	8002c04 <_puts_r+0x60>

08002c4c <puts>:
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <puts+0xc>)
 8002c4e:	4601      	mov	r1, r0
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	f7ff bfa7 	b.w	8002ba4 <_puts_r>
 8002c56:	bf00      	nop
 8002c58:	20000064 	.word	0x20000064

08002c5c <memset>:
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4402      	add	r2, r0
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d100      	bne.n	8002c66 <memset+0xa>
 8002c64:	4770      	bx	lr
 8002c66:	f803 1b01 	strb.w	r1, [r3], #1
 8002c6a:	e7f9      	b.n	8002c60 <memset+0x4>

08002c6c <__errno>:
 8002c6c:	4b01      	ldr	r3, [pc, #4]	; (8002c74 <__errno+0x8>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000064 	.word	0x20000064

08002c78 <__libc_init_array>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	4d0c      	ldr	r5, [pc, #48]	; (8002cb0 <__libc_init_array+0x38>)
 8002c7e:	4c0d      	ldr	r4, [pc, #52]	; (8002cb4 <__libc_init_array+0x3c>)
 8002c80:	1b64      	subs	r4, r4, r5
 8002c82:	10a4      	asrs	r4, r4, #2
 8002c84:	42a6      	cmp	r6, r4
 8002c86:	d109      	bne.n	8002c9c <__libc_init_array+0x24>
 8002c88:	f000 fb6e 	bl	8003368 <_init>
 8002c8c:	2600      	movs	r6, #0
 8002c8e:	4d0a      	ldr	r5, [pc, #40]	; (8002cb8 <__libc_init_array+0x40>)
 8002c90:	4c0a      	ldr	r4, [pc, #40]	; (8002cbc <__libc_init_array+0x44>)
 8002c92:	1b64      	subs	r4, r4, r5
 8002c94:	10a4      	asrs	r4, r4, #2
 8002c96:	42a6      	cmp	r6, r4
 8002c98:	d105      	bne.n	8002ca6 <__libc_init_array+0x2e>
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca0:	4798      	blx	r3
 8002ca2:	3601      	adds	r6, #1
 8002ca4:	e7ee      	b.n	8002c84 <__libc_init_array+0xc>
 8002ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002caa:	4798      	blx	r3
 8002cac:	3601      	adds	r6, #1
 8002cae:	e7f2      	b.n	8002c96 <__libc_init_array+0x1e>
 8002cb0:	080033f8 	.word	0x080033f8
 8002cb4:	080033f8 	.word	0x080033f8
 8002cb8:	080033f8 	.word	0x080033f8
 8002cbc:	080033fc 	.word	0x080033fc

08002cc0 <__retarget_lock_init_recursive>:
 8002cc0:	4770      	bx	lr

08002cc2 <__retarget_lock_acquire_recursive>:
 8002cc2:	4770      	bx	lr

08002cc4 <__retarget_lock_release_recursive>:
 8002cc4:	4770      	bx	lr
	...

08002cc8 <sbrk_aligned>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	4e0e      	ldr	r6, [pc, #56]	; (8002d04 <sbrk_aligned+0x3c>)
 8002ccc:	460c      	mov	r4, r1
 8002cce:	6831      	ldr	r1, [r6, #0]
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	b911      	cbnz	r1, 8002cda <sbrk_aligned+0x12>
 8002cd4:	f000 fade 	bl	8003294 <_sbrk_r>
 8002cd8:	6030      	str	r0, [r6, #0]
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f000 fad9 	bl	8003294 <_sbrk_r>
 8002ce2:	1c43      	adds	r3, r0, #1
 8002ce4:	d00a      	beq.n	8002cfc <sbrk_aligned+0x34>
 8002ce6:	1cc4      	adds	r4, r0, #3
 8002ce8:	f024 0403 	bic.w	r4, r4, #3
 8002cec:	42a0      	cmp	r0, r4
 8002cee:	d007      	beq.n	8002d00 <sbrk_aligned+0x38>
 8002cf0:	1a21      	subs	r1, r4, r0
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f000 face 	bl	8003294 <_sbrk_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d101      	bne.n	8002d00 <sbrk_aligned+0x38>
 8002cfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d00:	4620      	mov	r0, r4
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	20000264 	.word	0x20000264

08002d08 <_malloc_r>:
 8002d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d0c:	1ccd      	adds	r5, r1, #3
 8002d0e:	f025 0503 	bic.w	r5, r5, #3
 8002d12:	3508      	adds	r5, #8
 8002d14:	2d0c      	cmp	r5, #12
 8002d16:	bf38      	it	cc
 8002d18:	250c      	movcc	r5, #12
 8002d1a:	2d00      	cmp	r5, #0
 8002d1c:	4607      	mov	r7, r0
 8002d1e:	db01      	blt.n	8002d24 <_malloc_r+0x1c>
 8002d20:	42a9      	cmp	r1, r5
 8002d22:	d905      	bls.n	8002d30 <_malloc_r+0x28>
 8002d24:	230c      	movs	r3, #12
 8002d26:	2600      	movs	r6, #0
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e04 <_malloc_r+0xfc>
 8002d34:	f000 f912 	bl	8002f5c <__malloc_lock>
 8002d38:	f8d8 3000 	ldr.w	r3, [r8]
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	bb5c      	cbnz	r4, 8002d98 <_malloc_r+0x90>
 8002d40:	4629      	mov	r1, r5
 8002d42:	4638      	mov	r0, r7
 8002d44:	f7ff ffc0 	bl	8002cc8 <sbrk_aligned>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	d155      	bne.n	8002dfa <_malloc_r+0xf2>
 8002d4e:	f8d8 4000 	ldr.w	r4, [r8]
 8002d52:	4626      	mov	r6, r4
 8002d54:	2e00      	cmp	r6, #0
 8002d56:	d145      	bne.n	8002de4 <_malloc_r+0xdc>
 8002d58:	2c00      	cmp	r4, #0
 8002d5a:	d048      	beq.n	8002dee <_malloc_r+0xe6>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	4631      	mov	r1, r6
 8002d60:	4638      	mov	r0, r7
 8002d62:	eb04 0903 	add.w	r9, r4, r3
 8002d66:	f000 fa95 	bl	8003294 <_sbrk_r>
 8002d6a:	4581      	cmp	r9, r0
 8002d6c:	d13f      	bne.n	8002dee <_malloc_r+0xe6>
 8002d6e:	6821      	ldr	r1, [r4, #0]
 8002d70:	4638      	mov	r0, r7
 8002d72:	1a6d      	subs	r5, r5, r1
 8002d74:	4629      	mov	r1, r5
 8002d76:	f7ff ffa7 	bl	8002cc8 <sbrk_aligned>
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d037      	beq.n	8002dee <_malloc_r+0xe6>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	442b      	add	r3, r5
 8002d82:	6023      	str	r3, [r4, #0]
 8002d84:	f8d8 3000 	ldr.w	r3, [r8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d038      	beq.n	8002dfe <_malloc_r+0xf6>
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	42a2      	cmp	r2, r4
 8002d90:	d12b      	bne.n	8002dea <_malloc_r+0xe2>
 8002d92:	2200      	movs	r2, #0
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	e00f      	b.n	8002db8 <_malloc_r+0xb0>
 8002d98:	6822      	ldr	r2, [r4, #0]
 8002d9a:	1b52      	subs	r2, r2, r5
 8002d9c:	d41f      	bmi.n	8002dde <_malloc_r+0xd6>
 8002d9e:	2a0b      	cmp	r2, #11
 8002da0:	d917      	bls.n	8002dd2 <_malloc_r+0xca>
 8002da2:	1961      	adds	r1, r4, r5
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	6025      	str	r5, [r4, #0]
 8002da8:	bf18      	it	ne
 8002daa:	6059      	strne	r1, [r3, #4]
 8002dac:	6863      	ldr	r3, [r4, #4]
 8002dae:	bf08      	it	eq
 8002db0:	f8c8 1000 	streq.w	r1, [r8]
 8002db4:	5162      	str	r2, [r4, r5]
 8002db6:	604b      	str	r3, [r1, #4]
 8002db8:	4638      	mov	r0, r7
 8002dba:	f104 060b 	add.w	r6, r4, #11
 8002dbe:	f000 f8d3 	bl	8002f68 <__malloc_unlock>
 8002dc2:	f026 0607 	bic.w	r6, r6, #7
 8002dc6:	1d23      	adds	r3, r4, #4
 8002dc8:	1af2      	subs	r2, r6, r3
 8002dca:	d0ae      	beq.n	8002d2a <_malloc_r+0x22>
 8002dcc:	1b9b      	subs	r3, r3, r6
 8002dce:	50a3      	str	r3, [r4, r2]
 8002dd0:	e7ab      	b.n	8002d2a <_malloc_r+0x22>
 8002dd2:	42a3      	cmp	r3, r4
 8002dd4:	6862      	ldr	r2, [r4, #4]
 8002dd6:	d1dd      	bne.n	8002d94 <_malloc_r+0x8c>
 8002dd8:	f8c8 2000 	str.w	r2, [r8]
 8002ddc:	e7ec      	b.n	8002db8 <_malloc_r+0xb0>
 8002dde:	4623      	mov	r3, r4
 8002de0:	6864      	ldr	r4, [r4, #4]
 8002de2:	e7ac      	b.n	8002d3e <_malloc_r+0x36>
 8002de4:	4634      	mov	r4, r6
 8002de6:	6876      	ldr	r6, [r6, #4]
 8002de8:	e7b4      	b.n	8002d54 <_malloc_r+0x4c>
 8002dea:	4613      	mov	r3, r2
 8002dec:	e7cc      	b.n	8002d88 <_malloc_r+0x80>
 8002dee:	230c      	movs	r3, #12
 8002df0:	4638      	mov	r0, r7
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	f000 f8b8 	bl	8002f68 <__malloc_unlock>
 8002df8:	e797      	b.n	8002d2a <_malloc_r+0x22>
 8002dfa:	6025      	str	r5, [r4, #0]
 8002dfc:	e7dc      	b.n	8002db8 <_malloc_r+0xb0>
 8002dfe:	605b      	str	r3, [r3, #4]
 8002e00:	deff      	udf	#255	; 0xff
 8002e02:	bf00      	nop
 8002e04:	20000260 	.word	0x20000260

08002e08 <__sflush_r>:
 8002e08:	898a      	ldrh	r2, [r1, #12]
 8002e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	0710      	lsls	r0, r2, #28
 8002e10:	460c      	mov	r4, r1
 8002e12:	d457      	bmi.n	8002ec4 <__sflush_r+0xbc>
 8002e14:	684b      	ldr	r3, [r1, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dc04      	bgt.n	8002e24 <__sflush_r+0x1c>
 8002e1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	dc01      	bgt.n	8002e24 <__sflush_r+0x1c>
 8002e20:	2000      	movs	r0, #0
 8002e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e26:	2e00      	cmp	r6, #0
 8002e28:	d0fa      	beq.n	8002e20 <__sflush_r+0x18>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e30:	682f      	ldr	r7, [r5, #0]
 8002e32:	6a21      	ldr	r1, [r4, #32]
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	d032      	beq.n	8002e9e <__sflush_r+0x96>
 8002e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	075a      	lsls	r2, r3, #29
 8002e3e:	d505      	bpl.n	8002e4c <__sflush_r+0x44>
 8002e40:	6863      	ldr	r3, [r4, #4]
 8002e42:	1ac0      	subs	r0, r0, r3
 8002e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e46:	b10b      	cbz	r3, 8002e4c <__sflush_r+0x44>
 8002e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e4a:	1ac0      	subs	r0, r0, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e52:	4628      	mov	r0, r5
 8002e54:	6a21      	ldr	r1, [r4, #32]
 8002e56:	47b0      	blx	r6
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	d106      	bne.n	8002e6c <__sflush_r+0x64>
 8002e5e:	6829      	ldr	r1, [r5, #0]
 8002e60:	291d      	cmp	r1, #29
 8002e62:	d82b      	bhi.n	8002ebc <__sflush_r+0xb4>
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <__sflush_r+0x100>)
 8002e66:	410a      	asrs	r2, r1
 8002e68:	07d6      	lsls	r6, r2, #31
 8002e6a:	d427      	bmi.n	8002ebc <__sflush_r+0xb4>
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	6062      	str	r2, [r4, #4]
 8002e70:	6922      	ldr	r2, [r4, #16]
 8002e72:	04d9      	lsls	r1, r3, #19
 8002e74:	6022      	str	r2, [r4, #0]
 8002e76:	d504      	bpl.n	8002e82 <__sflush_r+0x7a>
 8002e78:	1c42      	adds	r2, r0, #1
 8002e7a:	d101      	bne.n	8002e80 <__sflush_r+0x78>
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	b903      	cbnz	r3, 8002e82 <__sflush_r+0x7a>
 8002e80:	6560      	str	r0, [r4, #84]	; 0x54
 8002e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e84:	602f      	str	r7, [r5, #0]
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d0ca      	beq.n	8002e20 <__sflush_r+0x18>
 8002e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e8e:	4299      	cmp	r1, r3
 8002e90:	d002      	beq.n	8002e98 <__sflush_r+0x90>
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 fa20 	bl	80032d8 <_free_r>
 8002e98:	2000      	movs	r0, #0
 8002e9a:	6360      	str	r0, [r4, #52]	; 0x34
 8002e9c:	e7c1      	b.n	8002e22 <__sflush_r+0x1a>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	47b0      	blx	r6
 8002ea4:	1c41      	adds	r1, r0, #1
 8002ea6:	d1c8      	bne.n	8002e3a <__sflush_r+0x32>
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0c5      	beq.n	8002e3a <__sflush_r+0x32>
 8002eae:	2b1d      	cmp	r3, #29
 8002eb0:	d001      	beq.n	8002eb6 <__sflush_r+0xae>
 8002eb2:	2b16      	cmp	r3, #22
 8002eb4:	d101      	bne.n	8002eba <__sflush_r+0xb2>
 8002eb6:	602f      	str	r7, [r5, #0]
 8002eb8:	e7b2      	b.n	8002e20 <__sflush_r+0x18>
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	e7ae      	b.n	8002e22 <__sflush_r+0x1a>
 8002ec4:	690f      	ldr	r7, [r1, #16]
 8002ec6:	2f00      	cmp	r7, #0
 8002ec8:	d0aa      	beq.n	8002e20 <__sflush_r+0x18>
 8002eca:	0793      	lsls	r3, r2, #30
 8002ecc:	bf18      	it	ne
 8002ece:	2300      	movne	r3, #0
 8002ed0:	680e      	ldr	r6, [r1, #0]
 8002ed2:	bf08      	it	eq
 8002ed4:	694b      	ldreq	r3, [r1, #20]
 8002ed6:	1bf6      	subs	r6, r6, r7
 8002ed8:	600f      	str	r7, [r1, #0]
 8002eda:	608b      	str	r3, [r1, #8]
 8002edc:	2e00      	cmp	r6, #0
 8002ede:	dd9f      	ble.n	8002e20 <__sflush_r+0x18>
 8002ee0:	4633      	mov	r3, r6
 8002ee2:	463a      	mov	r2, r7
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	6a21      	ldr	r1, [r4, #32]
 8002ee8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002eec:	47e0      	blx	ip
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	dc06      	bgt.n	8002f00 <__sflush_r+0xf8>
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	e790      	b.n	8002e22 <__sflush_r+0x1a>
 8002f00:	4407      	add	r7, r0
 8002f02:	1a36      	subs	r6, r6, r0
 8002f04:	e7ea      	b.n	8002edc <__sflush_r+0xd4>
 8002f06:	bf00      	nop
 8002f08:	dfbffffe 	.word	0xdfbffffe

08002f0c <_fflush_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	690b      	ldr	r3, [r1, #16]
 8002f10:	4605      	mov	r5, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	b913      	cbnz	r3, 8002f1c <_fflush_r+0x10>
 8002f16:	2500      	movs	r5, #0
 8002f18:	4628      	mov	r0, r5
 8002f1a:	bd38      	pop	{r3, r4, r5, pc}
 8002f1c:	b118      	cbz	r0, 8002f26 <_fflush_r+0x1a>
 8002f1e:	6a03      	ldr	r3, [r0, #32]
 8002f20:	b90b      	cbnz	r3, 8002f26 <_fflush_r+0x1a>
 8002f22:	f7ff fe09 	bl	8002b38 <__sinit>
 8002f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f3      	beq.n	8002f16 <_fflush_r+0xa>
 8002f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f30:	07d0      	lsls	r0, r2, #31
 8002f32:	d404      	bmi.n	8002f3e <_fflush_r+0x32>
 8002f34:	0599      	lsls	r1, r3, #22
 8002f36:	d402      	bmi.n	8002f3e <_fflush_r+0x32>
 8002f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f3a:	f7ff fec2 	bl	8002cc2 <__retarget_lock_acquire_recursive>
 8002f3e:	4628      	mov	r0, r5
 8002f40:	4621      	mov	r1, r4
 8002f42:	f7ff ff61 	bl	8002e08 <__sflush_r>
 8002f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f48:	4605      	mov	r5, r0
 8002f4a:	07da      	lsls	r2, r3, #31
 8002f4c:	d4e4      	bmi.n	8002f18 <_fflush_r+0xc>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	059b      	lsls	r3, r3, #22
 8002f52:	d4e1      	bmi.n	8002f18 <_fflush_r+0xc>
 8002f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f56:	f7ff feb5 	bl	8002cc4 <__retarget_lock_release_recursive>
 8002f5a:	e7dd      	b.n	8002f18 <_fflush_r+0xc>

08002f5c <__malloc_lock>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <__malloc_lock+0x8>)
 8002f5e:	f7ff beb0 	b.w	8002cc2 <__retarget_lock_acquire_recursive>
 8002f62:	bf00      	nop
 8002f64:	2000025c 	.word	0x2000025c

08002f68 <__malloc_unlock>:
 8002f68:	4801      	ldr	r0, [pc, #4]	; (8002f70 <__malloc_unlock+0x8>)
 8002f6a:	f7ff beab 	b.w	8002cc4 <__retarget_lock_release_recursive>
 8002f6e:	bf00      	nop
 8002f70:	2000025c 	.word	0x2000025c

08002f74 <__sread>:
 8002f74:	b510      	push	{r4, lr}
 8002f76:	460c      	mov	r4, r1
 8002f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f7c:	f000 f978 	bl	8003270 <_read_r>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	bfab      	itete	ge
 8002f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f86:	89a3      	ldrhlt	r3, [r4, #12]
 8002f88:	181b      	addge	r3, r3, r0
 8002f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f8e:	bfac      	ite	ge
 8002f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f92:	81a3      	strhlt	r3, [r4, #12]
 8002f94:	bd10      	pop	{r4, pc}

08002f96 <__swrite>:
 8002f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9a:	461f      	mov	r7, r3
 8002f9c:	898b      	ldrh	r3, [r1, #12]
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	05db      	lsls	r3, r3, #23
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	4616      	mov	r6, r2
 8002fa6:	d505      	bpl.n	8002fb4 <__swrite+0x1e>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	2200      	movs	r2, #0
 8002fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb0:	f000 f94c 	bl	800324c <_lseek_r>
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fbc:	81a3      	strh	r3, [r4, #12]
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	463b      	mov	r3, r7
 8002fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fca:	f000 b973 	b.w	80032b4 <_write_r>

08002fce <__sseek>:
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd6:	f000 f939 	bl	800324c <_lseek_r>
 8002fda:	1c43      	adds	r3, r0, #1
 8002fdc:	89a3      	ldrh	r3, [r4, #12]
 8002fde:	bf15      	itete	ne
 8002fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002fea:	81a3      	strheq	r3, [r4, #12]
 8002fec:	bf18      	it	ne
 8002fee:	81a3      	strhne	r3, [r4, #12]
 8002ff0:	bd10      	pop	{r4, pc}

08002ff2 <__sclose>:
 8002ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff6:	f000 b8f7 	b.w	80031e8 <_close_r>

08002ffa <__swbuf_r>:
 8002ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffc:	460e      	mov	r6, r1
 8002ffe:	4614      	mov	r4, r2
 8003000:	4605      	mov	r5, r0
 8003002:	b118      	cbz	r0, 800300c <__swbuf_r+0x12>
 8003004:	6a03      	ldr	r3, [r0, #32]
 8003006:	b90b      	cbnz	r3, 800300c <__swbuf_r+0x12>
 8003008:	f7ff fd96 	bl	8002b38 <__sinit>
 800300c:	69a3      	ldr	r3, [r4, #24]
 800300e:	60a3      	str	r3, [r4, #8]
 8003010:	89a3      	ldrh	r3, [r4, #12]
 8003012:	071a      	lsls	r2, r3, #28
 8003014:	d525      	bpl.n	8003062 <__swbuf_r+0x68>
 8003016:	6923      	ldr	r3, [r4, #16]
 8003018:	b31b      	cbz	r3, 8003062 <__swbuf_r+0x68>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	6922      	ldr	r2, [r4, #16]
 800301e:	b2f6      	uxtb	r6, r6
 8003020:	1a98      	subs	r0, r3, r2
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	4637      	mov	r7, r6
 8003026:	4283      	cmp	r3, r0
 8003028:	dc04      	bgt.n	8003034 <__swbuf_r+0x3a>
 800302a:	4621      	mov	r1, r4
 800302c:	4628      	mov	r0, r5
 800302e:	f7ff ff6d 	bl	8002f0c <_fflush_r>
 8003032:	b9e0      	cbnz	r0, 800306e <__swbuf_r+0x74>
 8003034:	68a3      	ldr	r3, [r4, #8]
 8003036:	3b01      	subs	r3, #1
 8003038:	60a3      	str	r3, [r4, #8]
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	6022      	str	r2, [r4, #0]
 8003040:	701e      	strb	r6, [r3, #0]
 8003042:	6962      	ldr	r2, [r4, #20]
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	429a      	cmp	r2, r3
 8003048:	d004      	beq.n	8003054 <__swbuf_r+0x5a>
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	07db      	lsls	r3, r3, #31
 800304e:	d506      	bpl.n	800305e <__swbuf_r+0x64>
 8003050:	2e0a      	cmp	r6, #10
 8003052:	d104      	bne.n	800305e <__swbuf_r+0x64>
 8003054:	4621      	mov	r1, r4
 8003056:	4628      	mov	r0, r5
 8003058:	f7ff ff58 	bl	8002f0c <_fflush_r>
 800305c:	b938      	cbnz	r0, 800306e <__swbuf_r+0x74>
 800305e:	4638      	mov	r0, r7
 8003060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f000 f805 	bl	8003074 <__swsetup_r>
 800306a:	2800      	cmp	r0, #0
 800306c:	d0d5      	beq.n	800301a <__swbuf_r+0x20>
 800306e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003072:	e7f4      	b.n	800305e <__swbuf_r+0x64>

08003074 <__swsetup_r>:
 8003074:	b538      	push	{r3, r4, r5, lr}
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <__swsetup_r+0xac>)
 8003078:	4605      	mov	r5, r0
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	460c      	mov	r4, r1
 800307e:	b118      	cbz	r0, 8003088 <__swsetup_r+0x14>
 8003080:	6a03      	ldr	r3, [r0, #32]
 8003082:	b90b      	cbnz	r3, 8003088 <__swsetup_r+0x14>
 8003084:	f7ff fd58 	bl	8002b38 <__sinit>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800308e:	0718      	lsls	r0, r3, #28
 8003090:	d422      	bmi.n	80030d8 <__swsetup_r+0x64>
 8003092:	06d9      	lsls	r1, r3, #27
 8003094:	d407      	bmi.n	80030a6 <__swsetup_r+0x32>
 8003096:	2309      	movs	r3, #9
 8003098:	602b      	str	r3, [r5, #0]
 800309a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800309e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030a2:	81a3      	strh	r3, [r4, #12]
 80030a4:	e034      	b.n	8003110 <__swsetup_r+0x9c>
 80030a6:	0758      	lsls	r0, r3, #29
 80030a8:	d512      	bpl.n	80030d0 <__swsetup_r+0x5c>
 80030aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ac:	b141      	cbz	r1, 80030c0 <__swsetup_r+0x4c>
 80030ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030b2:	4299      	cmp	r1, r3
 80030b4:	d002      	beq.n	80030bc <__swsetup_r+0x48>
 80030b6:	4628      	mov	r0, r5
 80030b8:	f000 f90e 	bl	80032d8 <_free_r>
 80030bc:	2300      	movs	r3, #0
 80030be:	6363      	str	r3, [r4, #52]	; 0x34
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	2300      	movs	r3, #0
 80030ca:	6063      	str	r3, [r4, #4]
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	89a3      	ldrh	r3, [r4, #12]
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	81a3      	strh	r3, [r4, #12]
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	b94b      	cbnz	r3, 80030f0 <__swsetup_r+0x7c>
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e6:	d003      	beq.n	80030f0 <__swsetup_r+0x7c>
 80030e8:	4621      	mov	r1, r4
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 f83f 	bl	800316e <__smakebuf_r>
 80030f0:	89a0      	ldrh	r0, [r4, #12]
 80030f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030f6:	f010 0301 	ands.w	r3, r0, #1
 80030fa:	d00a      	beq.n	8003112 <__swsetup_r+0x9e>
 80030fc:	2300      	movs	r3, #0
 80030fe:	60a3      	str	r3, [r4, #8]
 8003100:	6963      	ldr	r3, [r4, #20]
 8003102:	425b      	negs	r3, r3
 8003104:	61a3      	str	r3, [r4, #24]
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	b943      	cbnz	r3, 800311c <__swsetup_r+0xa8>
 800310a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800310e:	d1c4      	bne.n	800309a <__swsetup_r+0x26>
 8003110:	bd38      	pop	{r3, r4, r5, pc}
 8003112:	0781      	lsls	r1, r0, #30
 8003114:	bf58      	it	pl
 8003116:	6963      	ldrpl	r3, [r4, #20]
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	e7f4      	b.n	8003106 <__swsetup_r+0x92>
 800311c:	2000      	movs	r0, #0
 800311e:	e7f7      	b.n	8003110 <__swsetup_r+0x9c>
 8003120:	20000064 	.word	0x20000064

08003124 <__swhatbuf_r>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	460c      	mov	r4, r1
 8003128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800312c:	4615      	mov	r5, r2
 800312e:	2900      	cmp	r1, #0
 8003130:	461e      	mov	r6, r3
 8003132:	b096      	sub	sp, #88	; 0x58
 8003134:	da0c      	bge.n	8003150 <__swhatbuf_r+0x2c>
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	2100      	movs	r1, #0
 800313a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800313e:	bf0c      	ite	eq
 8003140:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003144:	2340      	movne	r3, #64	; 0x40
 8003146:	2000      	movs	r0, #0
 8003148:	6031      	str	r1, [r6, #0]
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	b016      	add	sp, #88	; 0x58
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	466a      	mov	r2, sp
 8003152:	f000 f859 	bl	8003208 <_fstat_r>
 8003156:	2800      	cmp	r0, #0
 8003158:	dbed      	blt.n	8003136 <__swhatbuf_r+0x12>
 800315a:	9901      	ldr	r1, [sp, #4]
 800315c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003160:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003164:	4259      	negs	r1, r3
 8003166:	4159      	adcs	r1, r3
 8003168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316c:	e7eb      	b.n	8003146 <__swhatbuf_r+0x22>

0800316e <__smakebuf_r>:
 800316e:	898b      	ldrh	r3, [r1, #12]
 8003170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003172:	079d      	lsls	r5, r3, #30
 8003174:	4606      	mov	r6, r0
 8003176:	460c      	mov	r4, r1
 8003178:	d507      	bpl.n	800318a <__smakebuf_r+0x1c>
 800317a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	6123      	str	r3, [r4, #16]
 8003182:	2301      	movs	r3, #1
 8003184:	6163      	str	r3, [r4, #20]
 8003186:	b002      	add	sp, #8
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	466a      	mov	r2, sp
 800318c:	ab01      	add	r3, sp, #4
 800318e:	f7ff ffc9 	bl	8003124 <__swhatbuf_r>
 8003192:	9900      	ldr	r1, [sp, #0]
 8003194:	4605      	mov	r5, r0
 8003196:	4630      	mov	r0, r6
 8003198:	f7ff fdb6 	bl	8002d08 <_malloc_r>
 800319c:	b948      	cbnz	r0, 80031b2 <__smakebuf_r+0x44>
 800319e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031a2:	059a      	lsls	r2, r3, #22
 80031a4:	d4ef      	bmi.n	8003186 <__smakebuf_r+0x18>
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	e7e3      	b.n	800317a <__smakebuf_r+0xc>
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	6020      	str	r0, [r4, #0]
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	9b00      	ldr	r3, [sp, #0]
 80031be:	6120      	str	r0, [r4, #16]
 80031c0:	6163      	str	r3, [r4, #20]
 80031c2:	9b01      	ldr	r3, [sp, #4]
 80031c4:	b15b      	cbz	r3, 80031de <__smakebuf_r+0x70>
 80031c6:	4630      	mov	r0, r6
 80031c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031cc:	f000 f82e 	bl	800322c <_isatty_r>
 80031d0:	b128      	cbz	r0, 80031de <__smakebuf_r+0x70>
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	431d      	orrs	r5, r3
 80031e2:	81a5      	strh	r5, [r4, #12]
 80031e4:	e7cf      	b.n	8003186 <__smakebuf_r+0x18>
	...

080031e8 <_close_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	2300      	movs	r3, #0
 80031ec:	4d05      	ldr	r5, [pc, #20]	; (8003204 <_close_r+0x1c>)
 80031ee:	4604      	mov	r4, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd fade 	bl	80007b4 <_close>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_close_r+0x1a>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_close_r+0x1a>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000268 	.word	0x20000268

08003208 <_fstat_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	2300      	movs	r3, #0
 800320c:	4d06      	ldr	r5, [pc, #24]	; (8003228 <_fstat_r+0x20>)
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	602b      	str	r3, [r5, #0]
 8003216:	f7fd fad8 	bl	80007ca <_fstat>
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d102      	bne.n	8003224 <_fstat_r+0x1c>
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	b103      	cbz	r3, 8003224 <_fstat_r+0x1c>
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	bd38      	pop	{r3, r4, r5, pc}
 8003226:	bf00      	nop
 8003228:	20000268 	.word	0x20000268

0800322c <_isatty_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	2300      	movs	r3, #0
 8003230:	4d05      	ldr	r5, [pc, #20]	; (8003248 <_isatty_r+0x1c>)
 8003232:	4604      	mov	r4, r0
 8003234:	4608      	mov	r0, r1
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	f7fd fad6 	bl	80007e8 <_isatty>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_isatty_r+0x1a>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	b103      	cbz	r3, 8003246 <_isatty_r+0x1a>
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000268 	.word	0x20000268

0800324c <_lseek_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	2200      	movs	r2, #0
 8003256:	4d05      	ldr	r5, [pc, #20]	; (800326c <_lseek_r+0x20>)
 8003258:	602a      	str	r2, [r5, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	f7fd face 	bl	80007fc <_lseek>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d102      	bne.n	800326a <_lseek_r+0x1e>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b103      	cbz	r3, 800326a <_lseek_r+0x1e>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20000268 	.word	0x20000268

08003270 <_read_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4604      	mov	r4, r0
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	2200      	movs	r2, #0
 800327a:	4d05      	ldr	r5, [pc, #20]	; (8003290 <_read_r+0x20>)
 800327c:	602a      	str	r2, [r5, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f7fc ff64 	bl	800014c <_read>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_read_r+0x1e>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_read_r+0x1e>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	20000268 	.word	0x20000268

08003294 <_sbrk_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	2300      	movs	r3, #0
 8003298:	4d05      	ldr	r5, [pc, #20]	; (80032b0 <_sbrk_r+0x1c>)
 800329a:	4604      	mov	r4, r0
 800329c:	4608      	mov	r0, r1
 800329e:	602b      	str	r3, [r5, #0]
 80032a0:	f7fd fab8 	bl	8000814 <_sbrk>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_sbrk_r+0x1a>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_sbrk_r+0x1a>
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	20000268 	.word	0x20000268

080032b4 <_write_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	4d05      	ldr	r5, [pc, #20]	; (80032d4 <_write_r+0x20>)
 80032c0:	602a      	str	r2, [r5, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f7fc ff5c 	bl	8000180 <_write>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d102      	bne.n	80032d2 <_write_r+0x1e>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	b103      	cbz	r3, 80032d2 <_write_r+0x1e>
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	20000268 	.word	0x20000268

080032d8 <_free_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	2900      	cmp	r1, #0
 80032de:	d040      	beq.n	8003362 <_free_r+0x8a>
 80032e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e4:	1f0c      	subs	r4, r1, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bfb8      	it	lt
 80032ea:	18e4      	addlt	r4, r4, r3
 80032ec:	f7ff fe36 	bl	8002f5c <__malloc_lock>
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <_free_r+0x8c>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	b933      	cbnz	r3, 8003304 <_free_r+0x2c>
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	6014      	str	r4, [r2, #0]
 80032fa:	4628      	mov	r0, r5
 80032fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003300:	f7ff be32 	b.w	8002f68 <__malloc_unlock>
 8003304:	42a3      	cmp	r3, r4
 8003306:	d908      	bls.n	800331a <_free_r+0x42>
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	1821      	adds	r1, r4, r0
 800330c:	428b      	cmp	r3, r1
 800330e:	bf01      	itttt	eq
 8003310:	6819      	ldreq	r1, [r3, #0]
 8003312:	685b      	ldreq	r3, [r3, #4]
 8003314:	1809      	addeq	r1, r1, r0
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	e7ed      	b.n	80032f6 <_free_r+0x1e>
 800331a:	461a      	mov	r2, r3
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b10b      	cbz	r3, 8003324 <_free_r+0x4c>
 8003320:	42a3      	cmp	r3, r4
 8003322:	d9fa      	bls.n	800331a <_free_r+0x42>
 8003324:	6811      	ldr	r1, [r2, #0]
 8003326:	1850      	adds	r0, r2, r1
 8003328:	42a0      	cmp	r0, r4
 800332a:	d10b      	bne.n	8003344 <_free_r+0x6c>
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	4401      	add	r1, r0
 8003330:	1850      	adds	r0, r2, r1
 8003332:	4283      	cmp	r3, r0
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	d1e0      	bne.n	80032fa <_free_r+0x22>
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4408      	add	r0, r1
 800333e:	6010      	str	r0, [r2, #0]
 8003340:	6053      	str	r3, [r2, #4]
 8003342:	e7da      	b.n	80032fa <_free_r+0x22>
 8003344:	d902      	bls.n	800334c <_free_r+0x74>
 8003346:	230c      	movs	r3, #12
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	e7d6      	b.n	80032fa <_free_r+0x22>
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	1821      	adds	r1, r4, r0
 8003350:	428b      	cmp	r3, r1
 8003352:	bf01      	itttt	eq
 8003354:	6819      	ldreq	r1, [r3, #0]
 8003356:	685b      	ldreq	r3, [r3, #4]
 8003358:	1809      	addeq	r1, r1, r0
 800335a:	6021      	streq	r1, [r4, #0]
 800335c:	6063      	str	r3, [r4, #4]
 800335e:	6054      	str	r4, [r2, #4]
 8003360:	e7cb      	b.n	80032fa <_free_r+0x22>
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	20000260 	.word	0x20000260

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
